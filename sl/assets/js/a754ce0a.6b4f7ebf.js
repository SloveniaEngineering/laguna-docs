"use strict";(self.webpackChunklaguna_docs=self.webpackChunklaguna_docs||[]).push([[7982],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||r;return t?i.createElement(g,o(o({ref:n},u),{},{components:t})):i.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},39093:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(87462),a=(t(67294),t(3905));const r={},o="Submitting changes",l={unversionedId:"contributing/backend/submitting_changes",id:"contributing/backend/submitting_changes",title:"Submitting changes",description:"Don't fork and contribute, just clone and contribute.",source:"@site/docs/contributing/backend/12-submitting_changes.md",sourceDirName:"contributing/backend",slug:"/contributing/backend/submitting_changes",permalink:"/laguna-docs/sl/docs/contributing/backend/submitting_changes",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"apiDocsSidebar",previous:{title:"Project structure",permalink:"/laguna-docs/sl/docs/contributing/backend/project_structure"},next:{title:"Frontend",permalink:"/laguna-docs/sl/docs/category/frontend"}},s={},c=[{value:"Label guide",id:"label-guide",level:2},{value:"Versioning",id:"versioning",level:2},{value:"Branching",id:"branching",level:2},{value:"Naming rules",id:"naming-rules",level:3}],u={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"submitting-changes"},"Submitting changes"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Don't fork")," and contribute, just clone and contribute.\nThis is because some token CI permissions are acting weird with forks.\nThis will be fixed.")),(0,a.kt)("p",null,"Because of that, if you want to contribute you have to be in the ",(0,a.kt)("inlineCode",{parentName:"p"},"SloveniaEngineering")," GitHub organization.\nMessage someone from the organization to add you to the organization or create an issue."),(0,a.kt)("h2",{id:"label-guide"},"Label guide"),(0,a.kt)("p",null,"There are many types of labels, the general syntax for them is ",(0,a.kt)("inlineCode",{parentName:"p"},"<TYPE>-<SUBTYPE>"),"."),(0,a.kt)("p",null,"Descriptions can be found at: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SloveniaEngineering/laguna-backend/labels"},"https://github.com/SloveniaEngineering/laguna-backend/labels"),"."),(0,a.kt)("p",null,"Basic types are:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"A")," - Area"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"C")," - Challenge"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"D")," - Difficulty"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"M")," - Special type for unsorted"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"N")," - Needs"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"P")," - Priority"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"S")," - Status"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"T")," - Type of issue/PR"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"V")," - Type of SemVer version to bump after resolve")),(0,a.kt)("h2",{id:"versioning"},"Versioning"),(0,a.kt)("p",null,"This project uses ",(0,a.kt)("a",{parentName:"p",href:"https://semver.org/"},"Semantic Versioning")," for releases.\nReleases occur when ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," is merged into ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," (aka. Git Flow)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Patch version is incremented on merge of ",(0,a.kt)("inlineCode",{parentName:"li"},"patch-*")," into ",(0,a.kt)("inlineCode",{parentName:"li"},"dev"),"."),(0,a.kt)("li",{parentName:"ul"},"Minor version is incremented on merge of ",(0,a.kt)("inlineCode",{parentName:"li"},"impl-*")," into ",(0,a.kt)("inlineCode",{parentName:"li"},"dev"),"."),(0,a.kt)("li",{parentName:"ul"},"Major version is set manually.")),(0,a.kt)("p",null,"This way ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," serves as a buffer for review and testing."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Version applies when ",(0,a.kt)("inlineCode",{parentName:"li"},"dev")," is merged into ",(0,a.kt)("inlineCode",{parentName:"li"},"master")," and Release is created with appropriate tag.")),(0,a.kt)("h2",{id:"branching"},"Branching"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Always branch of off ",(0,a.kt)("inlineCode",{parentName:"li"},"dev")," branch."),(0,a.kt)("li",{parentName:"ul"},"Always rebase your branch to lastest ",(0,a.kt)("inlineCode",{parentName:"li"},"dev"),".")),(0,a.kt)("h3",{id:"naming-rules"},"Naming rules"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If you are fixing/refactoring anything name your branch ",(0,a.kt)("inlineCode",{parentName:"li"},"patch-<something that is being fixed>"),"."),(0,a.kt)("li",{parentName:"ul"},"If you are implementing anything name your branch ",(0,a.kt)("inlineCode",{parentName:"li"},"impl-<something that is being implemented>"),".")))}m.isMDXComponent=!0}}]);