"use strict";(self.webpackChunklaguna_docs=self.webpackChunklaguna_docs||[]).push([[7059],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85184:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},i="SQL (Squeal) notes",s={unversionedId:"contributing/backend/squeal",id:"contributing/backend/squeal",title:"SQL (Squeal) notes",description:"- In stored functions, prefer RETURNS TABLE (LIKE ) over RETURNS SETOF .",source:"@site/docs/contributing/backend/10-squeal.md",sourceDirName:"contributing/backend",slug:"/contributing/backend/squeal",permalink:"/laguna-docs/sl/docs/contributing/backend/squeal",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"apiDocsSidebar",previous:{title:"Performance optimization",permalink:"/laguna-docs/sl/docs/contributing/backend/performance"},next:{title:"Project structure",permalink:"/laguna-docs/sl/docs/contributing/backend/project_structure"}},l={},p=[{value:"Changing queries and using prepared statements",id:"changing-queries-and-using-prepared-statements",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sql-squeal-notes"},"SQL (Squeal) notes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In stored functions, prefer ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURNS TABLE (LIKE <table_name>)")," over ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURNS SETOF <table_name>"),".\nSee other ways: ",(0,a.kt)("a",{parentName:"p",href:"https://dba.stackexchange.com/questions/135378/how-to-use-returns-table-with-an-existing-table-in-postgresql"},"https://dba.stackexchange.com/questions/135378/how-to-use-returns-table-with-an-existing-table-in-postgresql"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Stored functions return ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," rows if rows are not found. This is the only reason why we can't have compile-time queries for now.\nSee: ",(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/60222263/why-do-postgresql-functions-return-null-columns-instead-of-no-rows-when-the-retu"},"https://stackoverflow.com/questions/60222263/why-do-postgresql-functions-return-null-columns-instead-of-no-rows-when-the-retu"),".\nThat SO doesn't fix the issue.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Second blocker to compile-time queries is the fact that ",(0,a.kt)("inlineCode",{parentName:"p"},"sqlx")," doesn't work nice with custom types (even though it should, which is what they claim).\nFor example, role must be used in select like this: ",(0,a.kt)("inlineCode",{parentName:"p"},'SELECT role AS "role: _" FROM users WHERE id = $1'),".\nThe same goes with update where you may need to do ",(0,a.kt)("inlineCode",{parentName:"p"},'UPDATE "User" SET role = $1 WHERE id = $2')," and then in compile-time ",(0,a.kt)("inlineCode",{parentName:"p"},"sqlx::query!")," pass ",(0,a.kt)("inlineCode",{parentName:"p"},"role as _"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Prefer sending empty strings to stored procedures (rather than ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," due to usage of ",(0,a.kt)("inlineCode",{parentName:"p"},"STRICT"),", unless ALL parameters are ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL"),"-able.\nSee: ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-createfunction.html"},"https://www.postgresql.org/docs/current/sql-createfunction.html")," specifically ",(0,a.kt)("inlineCode",{parentName:"p"},"CALLED ON NULL INPUT")," (default mode)).\nThen in stored functions use ",(0,a.kt)("inlineCode",{parentName:"p"},"NULLIF"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"TRIM")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"COALESCE")," to convert empty strings to ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," if needed.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"See also ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/launchbadge/sqlx/pull/2670"},"https://github.com/launchbadge/sqlx/pull/2670")," as a possible fix to the third point."))),(0,a.kt)("h2",{id:"changing-queries-and-using-prepared-statements"},"Changing queries and using prepared statements"),(0,a.kt)("p",null,"Always prefer compile-time query to runtime query, so that errors are caught at compile time."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If a compile time (ie. ",(0,a.kt)("inlineCode",{parentName:"p"},"query_*!"),") is changed (even if just spacing is changed (because of underlying hash of query)) it needs to be re-prepared with ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts/prepare.sh"),".\nThis generates ",(0,a.kt)("inlineCode",{parentName:"p"},".sqlx/*")," files.\nUse ",(0,a.kt)("inlineCode",{parentName:"p"},"--merged")," to genertae ",(0,a.kt)("inlineCode",{parentName:"p"},"sqlx-data.json")," in workspace root.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If after compiling, ",(0,a.kt)("strong",{parentName:"p"},"compile time query is valid and works correctly")," you might consider moving it into stored procedure/function. Using ",(0,a.kt)("inlineCode",{parentName:"p"},"sqlx = { ..., git = ..., rev = ... }")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," didn't solve the issue though."))))}d.isMDXComponent=!0}}]);